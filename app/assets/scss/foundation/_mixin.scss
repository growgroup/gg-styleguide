// Mixin
//
// テンプレート内で利用できる mixin と function を定義
//

@use "sass:math";

// 数値の単位を削除する関数
@function strip-unit($number) {
  // 数値が単位付きの場合
  @if type-of($number) == 'number' and not unitless($number) {
    // 単位を削除するために1で割る
    @return math.div($number, $number * 0 + 1);
  }
  // 単位が無い場合はそのまま返す
  @return $number;
}

// 値をremに変換する関数
@function to-rem($value, $base: null) {
  // 値が数値でない場合の警告
  @if type-of($value) != 'number' {
    @warn inspect($value) + ' was passed to rem-calc(), which is not a number.';
    @return $value;
  }
  // 値がremでない場合
  @if unit($value) != 'rem' {
    $value: math.div(strip-unit($value), strip-unit($base)) * 1rem;
  }
  // 値が0remの場合
  @if $value == 0rem {
    $value: 0;
  }
  // 最終的なrem値を返す
  @return $value;
}

// remを計算する関数
@function rem-calc($values, $base: null) {
  // 結果を保存するリスト
  $rem-values: ();
  // 入力された値の長さ
  $count: length($values);
  // 基準値がnullの場合、デフォルトサイズを使用
  @if $base == null {
    $base: $font-html-size;
  }
  // 基準値が%の場合、pxに変換
  @if unit($base) == '%' {
    $base: math.div($base, 100%) * 16px;
  }
  // 入力された値が一つだけの場合
  @if $count == 1 {
    @return to-rem($values, $base);
  }
  // すべての値をremに変換してリストに追加
  @for $i from 1 through $count {
    $rem-values: append($rem-values, to-rem(nth($values, $i), $base));
  }
  // 最終的なrem値のリストを返す
  @return $rem-values;
}

// 値をemに変換する関数
@function to-em($value) {
  // 値がpxまたは単位なしの場合、remに変換
  @if unit($value) == 'px' or unitless($value) {
    $value: rem-calc($value, $base: 16px);
  }
  // 単位を取り除きemを掛ける
  @return strip-unit($value) * 1em;
}

// 値をvwに変換する関数
@function vw-calc($value, $viewport: 1400) {
  // 単位を取り除きvwを掛ける
  @return strip-unit($value) / strip-unit($viewport) * 100vw;
}

// 値をcqwに変換する関数
// container-type を指定したコンテナのデザイン上の幅を第2引数に指定すること
@function cqw-calc($value, $container-width: 1400) {
  @return strip-unit($value) / strip-unit($container-width) * 100cqw;
}

// レスポンシブな最小値を生成するmin関数
// @param {Number} $values... - 設定値（順番に基準値、ビューポート幅）
// @return {String} - min関数を使用したレスポンシブな値
// @example
//   .element {
//     font-size: miv-vw(16);      // 基準値のみ
//     margin: miv-vw(24, 1200);   // 基準値, ビューポート幅
//   }
@function min-vw($values...) {
  $value: nth($values, 1);
  $viewport: if(length($values) > 1, nth($values, 2), 1400);

  @return min(
    rem-calc($value),
    vw-calc($value, $viewport)
  );
}

// レスポンシブな値を生成するためのclamp関数
// @param {Number} $values... - 設定値（順番に基準値、最小値、最大ビューポート幅、ビューポート幅）
// @return {String} - clamp関数を使用したレスポンシブな値
// @example
//   .element {
//     font-size: clamp-vw(16);             // 基準値のみ
//     margin: clamp-vw(24, 10);            // 基準値, 最小値
//     padding: clamp-vw(24, 10, 2560);     // 基準値, 最小値, 最大ビューポート幅
//     width: clamp-vw(24, 10, 2560, 1400); // 基準値, 最小値, 最大ビューポート幅, ビューポート幅
//   }
@function clamp-vw($values...) {
  // デフォルト値の設定
  $value: nth($values, 1);
  $viewport: 1400;      // デフォルトのビューポート幅
  $viewport-max: 2560;  // デフォルトの最大ビューポート幅
  $min: 10;            // デフォルトの最小値

  // 引数の数に応じて値を上書き
  @if length($values) >= 2 { $min: nth($values, 2); }
  @if length($values) >= 3 { $viewport-max: nth($values, 3); }
  @if length($values) >= 4 { $viewport: nth($values, 4); }

  // clamp関数で最小値、可変値、最大値を設定
  @return clamp(
    rem-calc($min),
    vw-calc($value, $viewport),
    rem-calc($value / $viewport * $viewport-max)
  );
}

// ブレイクポイントのメディアクエリ文字列を返し、方向も返す関数
@function breakpoint($val: small) {
  $bp: nth($val, 1); // ブレイクポイントの値
  $bp-max: 0; // 最大値の初期化
  $dir: if(length($val) > 1, nth($val, 2), up); // 方向の設定
  $named: false; // Namedフラグの初期化

  // ブレイクポイントが文字列の場合
  @if type-of($bp) == 'string' {
    // ブレイクポイントが設定に存在する場合
    @if map-has-key($breakpoints, $bp) {
      // 方向が'only'または'down'の場合、最大値を設定
      @if $dir == 'only' or $dir == 'down' {
        $next-bp: map-next($breakpoints, $bp); // 次のブレイクポイントを取得
        // 次のブレイクポイントがない場合の警告
        @if $next-bp == null {
          $bp-max: null;
          @warn 'breakpoint(): the media query "#{$val}" cannot be used because #{$bp} is the largest breakpoint.';
        }
          // 次のブレイクポイントを最大値に設定
        @else {
          $bp-max: $next-bp;
        }
      }
      $bp: map-get($breakpoints, $bp); // 現在のブレイクポイント値を取得
      $named: true; // Namedフラグをtrueに設定
    }
      // ブレイクポイントが設定に存在しない場合
    @else {
      $bp: 0;
    }
  } @else {
    // ブレイクポイントが数値の場合
    @if $dir == 'only' or $dir == 'down' {
      $bp-max: $bp;
    }
  }


  // ブレイクポイント値をemに変換して微調整
  @if $bp {
    $bp: to-em($bp) - math.div(1, 16);
  }

  // ブレイクポイント最大値がある場合、emに変換して微調整
  @if $bp-max {
    $bp-max: to-em($bp-max) - math.div(1, 16);
  }

  // dir が upで bpが0の場合、dirを''に設定
  @if $dir == 'up' and $bp <= 0em {
    $dir: '';
  }

  // dir が onlyで bpが0の場合、dirをdownに設定
  @if $dir == 'only' and $bp <= 0em {
    $dir: 'down';
  }

  // 最終的なメディアクエリ文字列と方向をリストで返す
  @return (
    $bp,
    $bp-max,
    $dir
  );
}

// ブレイクポイントのメディアクエリを出力するミキシン
@mixin breakpoint($value) {
  $result: breakpoint($value); // ブレイクポイントの値を取得
  $bp: nth($result, 1); // サイズを取得
  $bp-max: nth($result, 2); // サイズを取得2
  $dir: nth($result, 3); // 方向を取得

  // 方向指定なしの場合はそのまま内容を出力
  @if $dir == '' {
    @content;
  } @else {
    // メディアクエリがある場合、条件付きで内容を出力
    @if $dir == 'only' {
      @media screen and (max-width: #{$bp-max}) {
        @media not screen and (max-width: #{$bp}) {
          @content;
        }
      }
    } @else if $dir == 'down' {
      @media screen and (max-width: #{$bp-max}) {
        @content;
      }
    } @else if $dir == 'up' {
      @media not screen and (max-width: #{$bp}) {
        @content;
      }
    }
  }
}

// mapの次の値を取得する関数
@function map-next($map, $key) {
  $values: map-values($map); // mapの値のリスト
  $i: 1; // インデックスの初期値
  $found: false; // 発見フラグの初期化
  // mapのキーを順に確認
  @each $val in map-keys($map) {
    @if $found == false {
      // キーが見つかった場合、次のループで値を取得
      @if ($key == $val) {
        $found: true;
      }
      $i: $i + 1;
    }
  }
  // 最後の値を超えた場合はnullを返す
  @if $i > length($map) {
    @return null;
  }
    // 次の値を返す
  @else {
    @return nth($values, $i);
  }
}


// センタリング
@mixin center-block() {
  margin-left: auto;
  margin-right: auto;
}

// クリアフィックス
@mixin clearfix {
  zoom: 1;
  &::before, &::after {
    content: " ";
    display: table;
  }
  &::after {
    clear: both;
  }
}

// box sizing
@mixin box-sizing($type) {
  box-sizing:$type;
}

// センターに合わせる
@mixin center-both {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%,-50%);
}

// クリアフィックス
%clearfix {
  zoom: 1;
  &::before,
  &::after {
    content: " ";
    display: table;
  }
  &::after {
    clear: both;
  }
}

// スクロールバーを常時表示する
@mixin always_display_scrollbar($scrollbar-color) {
  &::-webkit-scrollbar {
    width: 6px;
  }
  &::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.25);
    border-radius: 6px;
  }
  &::-webkit-scrollbar-track-piece:start {
    background: $scrollbar-color;
  }
  &::-webkit-scrollbar-track-piece:end {
    background: rgba(255, 255, 255, 0.25);
  }
}


@mixin button_colors($color){
  background: $color;
  border-color: $color;

  @include hover() {
    background: $color;
    color: #fff;
  }
}

// Pug Mixin
//
// Pug テンプレート内で利用可能なMixin一覧
//
// Styleguide 6.0.0

// タイトル
//
// タイトルを出力します。<br>
// <br>
// <code>
// @el : 要素を指定 eg. h2<br>
// @type : 大きさを指定 eg. xlg
// </code>
//
// markup:
// <pre>+heading(el,type)</pre>
//
// Styleguide 6.1.0

// ボタン
//
// ボタンの出力<br>
// <br>
// <code>
// @el : 要素を指定 eg. "a"<br>
// @link : リンク先 eg. "http://example.com"
// </code>
//
// markup:
// <pre>+c_button(el,link)</pre>
//
// Styleguide 6.2.0

// リスト
//
// リストの出力<br>
// <br>
// <code>
// @data : リストの情報をJsで指定</code>
// <h4>サンプル</h4>
// <pre>
// +list(["リスト1","リスト2","リスト3",<br>
// {
//     attr: {
//         class: "is-active"
//     },
//     link: "http://asdfasdfasdf.com",
//     text: "テキスト"
// },
// {
//     attr: {
//         class: "is-active"
//     },
//     link: {
//         href: "text",
//         target: "_blank",
//     },
//     text: "テキスト",
// }
// ])</pre>
//
// markup:
// <pre>+list(data)</pre>
//
// Styleguide 6.3.0

// テーブル
//
// テーブルの出力<br>
// <br>
// <code>
// @data : 表データのオブジェクト。キーの値は適当に指定して下さい<br>
// @headers : 見出しデータのオブジェクト
// </code>
// <h4>サンプル</h4>
// <pre>
// +c_table([
//         {
//              th: "見出し1",
//             _1: "通常",
//             _2: "通常",
//         }, {
//             th: "見出し1",
//             _1: "通常",
//             _2: "通常",
//         }, {
//             th: "見出し1",
//             _1: {
//                 attr: {
//                     colspan: 2
//                 },
//                 text: "通常"
//             },
//         },
//         ])
// </pre>
//
// markup:
// <pre>+c_table(data,headers)</pre>
//
// Styleguide 6.4.0

// 投稿記事
//
// 一覧ページでの記事表示<br>
// <br>
// <code>
// @el : 要素<br>
// @image : 画像URL<br>
// @title : 投稿タイトル<br>
// @date : 日付<br>
// @category : カテゴリ<br>
// @text : 抜粋文章<br>
// </code>
// <h4>サンプル</h4>
// <pre>
// +p_post_item("div","https://placeholdit.imgix.net/~text?txtsize=33&txt=350%C3%97150&w=350&h=150","タイトル","2016.10.10","カテゴリ","説明文説明文説明文説明文説明文説明文説明文説明文説明文説明文").is-horizon
// </pre>
//
// markup:
// <pre>+p_post_item(el,image,title,date,category,text)</pre>
//
// Styleguide 6.5.0

@mixin bg-option(){
  background-repeat: no-repeat;
  background-position: center center;
  background-size: cover;
}

@mixin news-date() {
  @include webfont();
  color: $color-primary;
  letter-spacing: 0;
  line-height: 1;
}

@mixin line-clamp($clamp:1) {
  overflow: hidden;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: $clamp;
}


@mixin bg-img(){
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  margin:auto;
  width: 100%;
  height: 100%;
  @include bg-option();
}

@mixin img-option($object-fit:cover) {
  width: 100%;
  height: 100%;
  max-width: initial;
  object-fit: $object-fit;
}

@mixin card-block(){
  display: block;
  text-decoration: none;
  color: $font-base-color;
}

// グラデーション
@mixin gradient-color($angle: 90deg, $colorLeft: $color-primary, $colorRight: $color-secondary) {
  background-image: linear-gradient($angle, $colorLeft 0%, $colorRight 100%);
}

// ボックスシャドウ
@mixin box-shadow($offsetX: 0, $offsetY: 10px, $blur: 20px, $color: rgba($color-black, 0.1)) {
  box-shadow: $offsetX $offsetY $blur $color;
}

// トランジション
@mixin transition($duration: .3s, $easing: ease) {
  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, visibility, box-shadow, transform;
  transition-timing-function: $easing;
  transition-duration: $duration;
}

@mixin transition-all($duration: .3s, $easing: ease) {
  transition-property: all;
  transition-timing-function: $easing;
  transition-duration: $duration;
}

@mixin transition-colors($duration: .3s, $easing: ease) {
  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;
  transition-timing-function: $easing;
  transition-duration: $duration;
}

@mixin transition-opacity($duration: .3s, $easing: ease) {
  transition-property: opacity, visibility;
  transition-timing-function: $easing;
  transition-duration: $duration;
}

@mixin transition-transform($duration: .3s, $easing: ease) {
  transition-property: transform;
  transition-timing-function: $easing;
  transition-duration: $duration;
}





// 可変背景画像の高さ計算（擬似要素の中にお使いください。）
@mixin bgimg-pt($height: 200, $width: 356) {
  content: '';
  display: block;
  padding-top: math.div($height, $width)*100%;
}

@mixin flex($justify-content: normal, $align-items: normal){
  display: flex;
  justify-content: $justify-content;
  align-items: $align-items;
}

@mixin font-format($size : $font-base-size,$letter:null,$height: 24,$weight:null) {
  //letter と weight が "" で送られてきてもnull扱いにする
  @if ($letter == "") {
    $letter: null;
  }
  @if ($weight == "") {
    $weight: null;
  }

  font-size: rem-calc($size);
  line-height: calc($height / $size);
  @if ($letter) { //nullにするとCSS出力をスキップします
    --letter-spacing: #{$letter + em};
  }
  @if ($weight) { //nullもしくは記載しないとCSS出力をスキップします
    font-weight: $weight;
  }
}

@mixin font-format-light($size : $font-base-size,$height: 24) {
  font-size: rem-calc($size);
  line-height: calc($height / $size);
}

@mixin flex-wrapper() {
  display: flex;
  flex-wrap: wrap;
  justify-content: flex-start;
}

@mixin flex-wrapper-item($num, $margin) {
  width: calc((100% / #{$num}) - (#{$margin}px * (#{$num} - 1) / #{$num}));
  &:not(:nth-child(#{$num}n + 1)) {
    margin-left: #{$margin}px;
  }
}

@mixin img-curtain($color, $opacity: .5) {
  content: "";
  display: block;
  position: absolute;
  width: 100%;
  height: 100%;
  background: rgba($color, $opacity);
  top: 0;
  left: 0;
}

//https://zenn.dev/kagan/articles/css-hover-style
@mixin hover {
  @media (hover: hover) {
    &:where(:any-link, :enabled, summary):hover {
      @content;
    }
  }
}

@mixin group-hover {
  @media (hover: hover) {
    &:is(:where(:any-link, :enabled, summary):hover *) {
      @content;
    }
  }
}

@mixin icon-font-style {
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  letter-spacing: 0;
  text-transform: none;
  overflow: hidden;
}

@mixin icon-font-size-control{
  display: inline-block;
  flex-shrink: 0;
  width: 1em;
  height: 1em;
}
